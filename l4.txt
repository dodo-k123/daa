1) Min Max program

class find_maxmin
{
    static int max=0;
    static int min=999;
    static int min1=999;
    static int max1=0;
    static int mid=0;
    static void maxmin(int arr[],int i,int j){
        if(i==j){
            max=min=arr[i];
        }
        else if(i==j-1){
            if(arr[i]<arr[j]){
                max=arr[j];
                min=arr[i];
            }
            else{
                max=arr[i];
                min=arr[j];
            }
        }
        else{
            mid=(i+j)/2;
            maxmin(arr,i,mid);
            max1=max;
            min1=min;
            maxmin(arr,mid+1,j);
            if(max<max1){
                max=max1;
            }
            if(min>min1){
                min=min1;
            }
        }
    }
    public static void main(String args[]){
        int arr[]={20,10,60,70,90,5};
        int i=0;
        int j=arr.length-1;
        maxmin(arr,i,j);
        System.out.println(max);
        System.out.println(min);
    }
}


2) Merge Sort 

import java.util.*;
class merge_sort
{
	static void sort(int arr[]){
		if(arr.length>1){
			int mid=arr.length/2;
			int lf[]=new int[mid];
			int rf[]=new int[arr.length-mid];
			for(int i=0;i<mid;i++){
				lf[i]=arr[i];
			}
			for(int i=0;i<arr.length-mid;i++){
				rf[i]=arr[mid+i];
			}
		int i=0;
		int j=0;
		int k=0;
		sort(lf);
		sort(rf);
		while(i<lf.length && j<rf.length){
			if(lf[i]<rf[j]){
				arr[k]=lf[i];
				i=i+1;}
			else{
				arr[k]=rf[j];
				j=j+1;
			}
			k=k+1;
		}
		while(i<lf.length){
			arr[k]=lf[i];
			i=i+1;
			k=k+1;
		}
		while(j<rf.length){
			arr[k]=rf[j];
			j=j+1;
			k=k+1;
		}
		System.out.println(Arrays.toString(arr));
	}
	}

	public static void main(String ags[]){
		int arr[]={20,100,40,60,30,96};
		int i=0;
		int j=arr.length-1;
		int n=arr.length;
		sort(arr);
	}
}

3) BST program

class Node{
    int data;
    Node left,right;
}
class BStree{
    Node root;
    public BStree(){
        root=null;
    }
    void insert(int val){
        Node temp,ptr;
        temp=new Node();
        temp.data=val;
        temp.left=null;
        temp.right=null;
        if(root==null){
            root=temp;
        }
        else{
            ptr=root;
            while(ptr!=null){
                if(val>ptr.data){
                    if(ptr.right==null){
                        ptr.right=temp;
                        break;
                    }
                    else{
                        ptr=ptr.right;
                    }
                }
                else if(val<ptr.data){
                    if(ptr.left==null){
                        ptr.left=temp;
                        break;
                    }
                    else{
                        ptr=ptr.left;
                    }
                }
                else{
                    System.out.println("Invalid input");
                }
            }
        }
    }
    void search(int key){
        Node ptr1;
        ptr1=root;
        while(ptr1!=null){
            if(ptr1.data==key){
                System.out.println("Element found");
                break;
            }
            else if(key>ptr1.data){
                ptr1=ptr1.right;
            }
            else if(key<ptr1.data){
                ptr1=ptr1.left;
            }
        }
        if(ptr1==null){
            System.out.println("Element does not exist");
        }
    }
    public static Node deleterec(Node ptr,int key_d){
        Node temp1;
        if(ptr==null) {
            return null;
        }
        if(key_d<ptr.data){
            ptr.left=deleterec(ptr.left,key_d);
        }
        else if(key_d>ptr.data){
            ptr.right=deleterec(ptr.right,key_d);
        }
        else{
            if(ptr.left==null){
                return ptr.right;
            }
            else if(ptr.right==null){
                return ptr.left;
            }
            else{
                Node successor=getsuccessor(ptr);
                ptr.data= successor.data;
                ptr.right=deleterec(ptr.right,ptr.data);
            }
        }
        return ptr;
    }
    public static Node getsuccessor(Node ptr){
        Node temp=ptr.right;
        while(temp.left!=null){
            temp=temp.left;
        }
        return temp;
    }
    void delete_oper(int key_delete){
        deleterec(root,key_delete);
    }
    static void preorder(Node ptr){
        if(ptr==null)
            return;
        System.out.printf("%d ",ptr.data);
        preorder(ptr.left);
        preorder(ptr.right);
    }
    void traversal(){
        preorder(root);
    }
}
public class BST_practice {
    public static void main(String[] args) {
        BStree b=new BStree();
        b.insert(40);
        b.insert(80);
        b.insert(35);
        b.insert(90);
        b.insert(45);
        b.insert(50);
        b.insert(70);
        b.traversal();
        b.search(5);
        b.delete_oper(50);
        b.traversal();
    }
}

4) Job sequencing program

import java.util.*;
class Job{	
	char id;
	int deadline,profit;
	public Job(){}
	public Job(char id,int deadline,int profit){
		this.id=id;
		this.deadline=deadline;
		this.profit=profit;
	}
	static void printJobScheduling(ArrayList<Job> arr,int t){
		int n=arr.size();
		// for array list use size method not length
		Collections.sort(arr,(a,b)->b.profit-a.profit);
		boolean result[]=new boolean[t];
		char job[]=new char[t];
		for(int i=0;i<n;i++){
		for(int j=Math.min(t-1,arr.get(i).deadline-1);j>=0;j--){
				if(result[j]==false){
					result[j]=true;
					job[j]=arr.get(i).id;
					break;
				}
			}
		}
		for(int i=0;i<t;i++){
			int profit=0;
            	for(int j=0;j<n;j++){
                	if(job[i]==arr.get(j).id){
					profit=arr.get(j).profit;
				}
			}
			System.out.println("Job :"+job[i]+" profit :"+profit); 
		}
	}
	public static void main(String args[]){
		ArrayList<Job> arr=new ArrayList<Job>();
		arr.add(new Job('a', 2, 100));
		arr.add(new Job('b', 1, 19));
		arr.add(new Job('c', 2, 27));
		arr.add(new Job('d', 1, 25));
		arr.add(new Job('e', 3, 15));
		System.out.println(	"Following is maximum profit sequence of jobs");
		Job.printJobScheduling(arr, 3);
	}
}

5) Prims algorithm

import java.util.*;
import java.lang.*;
import java.io.*;
 
class MST {
    // Number of vertices in the graph
    private static final int V = 5;
    int minKey(int key[], Boolean mstSet[])
    {
        // Initialize min value
        int min = Integer.MAX_VALUE, min_index = -1;
 
        for (int v = 0; v < V; v++)
            if (mstSet[v] == false && key[v] < min) {
                min = key[v];
                min_index = v;
            }
 
        return min_index;
    }
     void printMST(int parent[], int graph[][])
    {
        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++)
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
    }
    void primMST(int graph[][])
    {
        // Array to store constructed MST
        int parent[] = new int[V];
 
        // Key values used to pick minimum weight edge in cut
        int key[] = new int[V];
 
        // To represent set of vertices included in MST
        Boolean mstSet[] = new Boolean[V];
 
        // Initialize all keys as INFINITE
        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }
 
        // Always include first 1st vertex in MST.
        key[0] = 0; // Make key 0 so that this vertex is
        // picked as first vertex
        parent[0] = -1; // First node is always root of MST
 
        // The MST will have V vertices
        for (int count = 0; count < V - 1; count++) {
            // Pick thd minimum key vertex from the set of vertices
            // not yet included in MST
            int u = minKey(key, mstSet);
 
            // Add the picked vertex to the MST Set
            mstSet[u] = true;
 
            // Update key value and parent index of the adjacent
            // vertices of the picked vertex. Consider only those
            // vertices which are not yet included in MST
            for (int v = 0; v < V; v++)
                 if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
        }
 
        // print the constructed MST
        printMST(parent, graph);
    }
 
    public static void main(String[] args)
    {
        MST t = new MST();
        int graph[][] = new int[][] { { 0, 2, 0, 6, 0 },
                                      { 2, 0, 3, 8, 5 },
                                      { 0, 3, 0, 0, 7 },
                                      { 6, 8, 0, 0, 9 },
                                      { 0, 5, 7, 9, 0 } };
 
        // Print the solution
        t.primMST(graph);
    }
}


6) Djikstra’s program 

import java.util.*;
import java.lang.*;
import java.io.*;
 
class ShortestPath {
    static final int V = 9;
    int minDistance(int dist[], Boolean sptSet[])
    {
        // Initialize min value
        int min = Integer.MAX_VALUE, min_index = -1;
 
        for (int v = 0; v < V; v++)
            if (sptSet[v] == false && dist[v] <= min) {
                min = dist[v];
                min_index = v;
            }
 
        return min_index;
    }
 
    // A utility function to print the constructed distance array
    void printSolution(int dist[])
    {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < V; i++)
            System.out.println(i + " \t\t " + dist[i]);
    }
 
    
    void dijkstra(int graph[][], int src)
    {
        int dist[] = new int[V]; 
        Boolean sptSet[] = new Boolean[V];
 
        // Initialize all distances as INFINITE and stpSet[] as false
        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE;
            sptSet[i] = false;
        }
 
        // Distance of source vertex from itself is always 0
        dist[src] = 0;
 
        // Find shortest path for all vertices
        for (int count = 0; count < V - 1; count++) {
            int u = minDistance(dist, sptSet);
            sptSet[u] = true;
 
            // Update dist value of the adjacent vertices of the
            // picked vertex.
            for (int v = 0; v < V; v++)
                if (!sptSet[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];
        }
 
        // print the constructed distance array
        printSolution(dist);
    }
 
    // Driver method
    public static void main(String[] args)
    {
        
        int graph[][] = new int[][] { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
                                      { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                                      { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                                      { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
                                      { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                                      { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
                                      { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
                                      { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                                      { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
        ShortestPath t = new ShortestPath();
        t.dijkstra(graph, 0);
    }
}

7) Kruskal algorithm
class Main
{
 
static int V = 5;
static int[] parent = new int[V];
static int INF = Integer.MAX_VALUE;

static int find(int i)
{
    while (parent[i] != i)
        i = parent[i];
    return i;
}

static void union1(int i, int j)
{
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

static void kruskalMST(int cost[][])
{
    int mincost = 0; 
    
    for (int i = 0; i < V; i++)
        parent[i] = i;
 
    int edge_count = 0;
    while (edge_count < V - 1)
    {
        int min = INF, a = -1, b = -1;
        for (int i = 0; i < V; i++) 
        {
            for (int j = 0; j < V; j++) 
            {
                if (find(i) != find(j) && cost[i][j] < min) 
                {
                    min = cost[i][j];
                    a = i;
                    b = j;
                }
            }
        }
 
        union1(a, b);
        System.out.printf("Edge %d:(%d, %d) cost:%d \n",
            edge_count++, a, b, min);
        mincost += min;
    }
    System.out.printf("\n Minimum cost= %d \n", mincost);
}

public static void main(String[] args)
{
/* Let us create the following graph
        2 3
    (0)--(1)--(2)
    | / \ |
    6| 8/ \5 |7
    | /     \ |
    (3)-------(4)
            9         */
    
    int cost[][] = {
        { INF, 2, INF, 6, INF },
        { 2, INF, 3, 8, 5 },
        { INF, 3, INF, INF, 7 },
        { 6, 8, INF, INF, 9 },
        { INF, 5, 7, 9, INF },
    };
 
    // Print the solution
    kruskalMST(cost);
    }
}
8) OBST program 
 public class GFG
{
    static int optCost(int freq[], int i, int j)
    {
       // Base cases
       if (j < i)      // no elements in this subarray
         return 0;
       if (j == i)     // one element in this subarray
         return freq[i];
      
       // Get sum of freq[i], freq[i+1], ... freq[j]
       int fsum = sum(freq, i, j);
      
       // Initialize minimum value
       int min = Integer.MAX_VALUE;
       for (int r = i; r <= j; ++r)
       {
           int cost = optCost(freq, i, r-1) +
                          optCost(freq, r+1, j);
           if (cost < min)
              min = cost;
       }
      
       // Return minimum value
       return min + fsum;
    }
    static int optimalSearchTree(int keys[], int freq[], int n)
    {
         return optCost(freq, 0, n-1);
    }
     
    // A utility function to get sum of array elements
        // freq[i] to freq[j]
    static int sum(int freq[], int i, int j)
    {
        int s = 0;
        for (int k = i; k <=j; k++)
           s += freq[k];
        return s;
    }
     
    // Driver code
    public static void main(String[] args) {
        int keys[] = {10, 12, 20};
        int freq[] = {34, 8, 50};
        int n = keys.length;
        System.out.println("Cost of Optimal BST is " +
                         optimalSearchTree(keys, freq, n));
    }
}

9) 0/1 knapsack Dynamic
class Knapsack {

	static int max(int a, int b)
	{
		return (a > b) ? a : b;
	}

	static int knapSack(int W, int wt[],
						int val[], int n)
	{
		int i, w;
		int K[][] = new int[n + 1][W + 1];

		// Build table K[][] in bottom up manner
		for (i = 0; i <= n; i++)
		{
			for (w = 0; w <= W; w++)
			{
				if (i == 0 || w == 0)
					K[i][w] = 0;
				else if (wt[i - 1] <= w)
					K[i][w]
						= max(val[i - 1]
						+ K[i - 1][w - wt[i - 1]],
						K[i - 1][w]);
				else
					K[i][w] = K[i - 1][w];
			}
		}

		return K[n][W];
	}

	// Driver code
	public static void main(String args[])
	{
		int val[] = new int[] { 60, 100, 120 };
		int wt[] = new int[] { 10, 20, 30 };
		int W = 50;
		int n = val.length;
		System.out.println(knapSack(W, wt, val, n));
	}
}

10)Connected components
import java.util.ArrayList;
class Graph
{
	int V;
	ArrayList<ArrayList<Integer> > adjListArray;

	// constructor
	Graph(int V)
	{
		this.V = V;
		// define the size of array as
		// number of vertices
		adjListArray = new ArrayList<>();

		// Create a new list for each vertex
		// such that adjacent nodes can be stored

		for (int i = 0; i < V; i++) {
			adjListArray.add(i, new ArrayList<>());
		}
	}

	// Adds an edge to an undirected graph
	void addEdge(int src, int dest)
	{
		// Add an edge from src to dest.
		adjListArray.get(src).add(dest);

		// Since graph is undirected, add an edge from dest
		// to src also
		adjListArray.get(dest).add(src);
	}

	void DFSUtil(int v, boolean[] visited)
	{
		// Mark the current node as visited and print it
		visited[v] = true;
		System.out.print(v + " ");
		// Recur for all the vertices
		// adjacent to this vertex
		for (int x : adjListArray.get(v)) {
			if (!visited[x])
				DFSUtil(x, visited);
		}
	}
	void connectedComponents()
	{
		// Mark all the vertices as not visited
		boolean[] visited = new boolean[V];
		for (int v = 0; v < V; ++v) {
			if (!visited[v]) {
				// print all reachable vertices
				// from v
				DFSUtil(v, visited);
				System.out.println();
			}
		}
	}

	// Driver code
	public static void main(String[] args)
	{
		// Create a graph given in the above diagram
		Graph g = new Graph(
			5); // 5 vertices numbered from 0 to 4

		g.addEdge(1, 0);
		g.addEdge(2, 3);
		g.addEdge(3, 4);
		System.out.println(
			"Following are connected components");
		g.connectedComponents();
	}
}
11)Articulation points 
	// A Java program to find articulation
// points in an undirected graph
import java.util.*;

class Graph {

	static int time;

	static void addEdge(ArrayList<ArrayList<Integer> > adj, int u, int v)
	{
		adj.get(u).add(v);
		adj.get(v).add(u);
	}

	static void APUtil(ArrayList<ArrayList<Integer> > adj, int u,
					boolean visited[], int disc[], int low[],
					int parent, boolean isAP[])
	{
		// Count of children in DFS Tree
		int children = 0;

		// Mark the current node as visited
		visited[u] = true;

		// Initialize discovery time and low value
		disc[u] = low[u] = ++time;

		// Go through all vertices adjacent to this
		for (Integer v : adj.get(u)) {
			// If v is not visited yet, then make it a child of u
			// in DFS tree and recur for it
			if (!visited[v]) {
				children++;
				APUtil(adj, v, visited, disc, low, u, isAP);

				// Check if the subtree rooted with v has
				// a connection to one of the ancestors of u
				low[u] = Math.min(low[u], low[v]);

				// If u is not root and low value of one of
				// its child is more than discovery value of u.
				if (parent != -1 && low[v] >= disc[u])
					isAP[u] = true;
			}

			// Update low value of u for parent function calls.
			else if (v != parent)
				low[u] = Math.min(low[u], disc[v]);
		}

		// If u is root of DFS tree and has two or more children.
		if (parent == -1 && children > 1)
			isAP[u] = true;
	}

	static void AP(ArrayList<ArrayList<Integer> > adj, int V)
	{
		boolean[] visited = new boolean[V];
		int[] disc = new int[V];
		int[] low = new int[V];
		boolean[] isAP = new boolean[V];
		int time = 0, par = -1;

		// Adding this loop so that the
		// code works even if we are given
		// disconnected graph
		for (int u = 0; u < V; u++)
			if (visited[u] == false)
				APUtil(adj, u, visited, disc, low, par, isAP);

		for (int u = 0; u < V; u++)
			if (isAP[u] == true)
				System.out.print(u + " ");
		System.out.println();
	}

	public static void main(String[] args)
	{

		// Creating first example graph
		int V = 5;
		ArrayList<ArrayList<Integer> > adj1 =
						new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj1.add(new ArrayList<Integer>());
		addEdge(adj1, 1, 0);
		addEdge(adj1, 0, 2);
		addEdge(adj1, 2, 1);
		addEdge(adj1, 0, 3);
		addEdge(adj1, 3, 4);
		System.out.println("Articulation points in first graph");
		AP(adj1, V);

		// Creating second example graph
		V = 4;
		ArrayList<ArrayList<Integer> > adj2 =
						new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj2.add(new ArrayList<Integer>());

		addEdge(adj2, 0, 1);
		addEdge(adj2, 1, 2);
		addEdge(adj2, 2, 3);

		System.out.println("Articulation points in second graph");
		AP(adj2, V);

		// Creating third example graph
		V = 7;
		ArrayList<ArrayList<Integer> > adj3 =
							new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj3.add(new ArrayList<Integer>());

		addEdge(adj3, 0, 1);
		addEdge(adj3, 1, 2);
		addEdge(adj3, 2, 0);
		addEdge(adj3, 1, 3);
		addEdge(adj3, 1, 4);
		addEdge(adj3, 1, 6);
		addEdge(adj3, 3, 5);
		addEdge(adj3, 4, 5);

		System.out.println("Articulation points in third graph");

		AP(adj3, V);
	}
}
12) Nqueens program
	/* Java program to solve N Queen Problem using
backtracking */
public class NQueenProblem {
	final int N = 4;

	/* A utility function to print solution */
	void printSolution(int board[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(" " + board[i][j]
								+ " ");
			System.out.println();
		}
	}

	/* A utility function to check if a queen can
	be placed on board[row][col]. Note that this
	function is called when "col" queens are already
	placeed in columns from 0 to col -1. So we need
	to check only left side for attacking queens */
	boolean isSafe(int board[][], int row, int col)
	{
		int i, j;

		/* Check this row on left side */
		for (i = 0; i < col; i++)
			if (board[row][i] == 1)
				return false;

		/* Check upper diagonal on left side */
		for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
			if (board[i][j] == 1)
				return false;

		/* Check lower diagonal on left side */
		for (i = row, j = col; j >= 0 && i < N; i++, j--)
			if (board[i][j] == 1)
				return false;

		return true;
	}

	/* A recursive utility function to solve N
	Queen problem */
	boolean solveNQUtil(int board[][], int col)
	{
		/* base case: If all queens are placed
		then return true */
		if (col >= N)
			return true;

		/* Consider this column and try placing
		this queen in all rows one by one */
		for (int i = 0; i < N; i++) {
			/* Check if the queen can be placed on
			board[i][col] */
			if (isSafe(board, i, col)) {
				/* Place this queen in board[i][col] */
				board[i][col] = 1;

				/* recur to place rest of the queens */
				if (solveNQUtil(board, col + 1) == true)
					return true;

				/* If placing queen in board[i][col]
				doesn't lead to a solution then
				remove queen from board[i][col] */
				board[i][col] = 0; // BACKTRACK
			}
		}

		/* If the queen can not be placed in any row in
		this column col, then return false */
		return false;
	}

	/* This function solves the N Queen problem using
	Backtracking. It mainly uses solveNQUtil () to
	solve the problem. It returns false if queens
	cannot be placed, otherwise, return true and
	prints placement of queens in the form of 1s.
	Please note that there may be more than one
	solutions, this function prints one of the
	feasible solutions.*/
	boolean solveNQ()
	{
		int board[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

		if (solveNQUtil(board, 0) == false) {
			System.out.print("Solution does not exist");
			return false;
		}

		printSolution(board);
		return true;
	}

	// driver program to test above function
	public static void main(String args[])
	{
		NQueenProblem Queen = new NQueenProblem();
		Queen.solveNQ();
	}
}
13) Mcoloring Program
public class mColoringProblem
{
	final int V = 4;
	int color[];

	/* A utility function to check
	if the current color assignment
	is safe for vertex v */
	boolean isSafe(
		int v, int graph[][], int color[],
		int c)
	{
		for (int i = 0; i < V; i++)
			if (
				graph[v][i] == 1 && c == color[i])
				return false;
		return true;
	}

	/* A recursive utility function
	to solve m coloring problem */
	boolean graphColoringUtil(
		int graph[][], int m,
		int color[], int v)
	{
		/* base case: If all vertices are
		assigned a color then return true */
		if (v == V)
			return true;

		/* Consider this vertex v and try
		different colors */
		for (int c = 1; c <= m; c++)
		{
			/* Check if assignment of color c to v
			is fine*/
			if (isSafe(v, graph, color, c))
			{
				color[v] = c;

				/* recur to assign colors to rest
				of the vertices */
				if (
					graphColoringUtil(
						graph, m,
						color, v + 1))
					return true;

				/* If assigning color c doesn't lead
				to a solution then remove it */
				color[v] = 0;
			}
		}

		/* If no color can be assigned to
		this vertex then return false */
		return false;
	}
	boolean graphColoring(int graph[][], int m)
	{
		// Initialize all color values as 0. This
		// initialization is needed correct
		// functioning of isSafe()
		color = new int[V];
		for (int i = 0; i < V; i++)
			color[i] = 0;

		// Call graphColoringUtil() for vertex 0
		if (
			!graphColoringUtil(
				graph, m, color, 0))
		{
			System.out.println(
				"Solution does not exist");
			return false;
		}

		// Print the solution
		printSolution(color);
		return true;
	}

	/* A utility function to print solution */
	void printSolution(int color[])
	{
		System.out.println(
			"Solution Exists: Following"
			+ " are the assigned colors");
		for (int i = 0; i < V; i++)
			System.out.print(" " + color[i] + " ");
		System.out.println();
	}

	// driver program to test above function
	public static void main(String args[])
	{
		mColoringProblem Coloring
			= new mColoringProblem();
		int graph[][] = {
			{ 0, 1, 1, 1 },
			{ 1, 0, 1, 0 },
			{ 1, 1, 0, 1 },
			{ 1, 0, 1, 0 },
		};
		int m = 3; // Number of colors
		Coloring.graphColoring(graph, m);
	}
}

14 ) Hamiltonian cycle 
class HamiltonianCycle
{
	final int V = 5;
	int path[];
	boolean isSafe(int v, int graph[][], int path[], int pos)
	{
		/* Check if this vertex is an adjacent vertex of
		the previously added vertex. */
		if (graph[path[pos - 1]][v] == 0)
			return false;

		/* Check if the vertex has already been included.
		This step can be optimized by creating an array
		of size V */
		for (int i = 0; i < pos; i++)
			if (path[i] == v)
				return false;

		return true;
	}

	boolean hamCycleUtil(int graph[][], int path[], int pos)
	{
		/* base case: If all vertices are included in
		Hamiltonian Cycle */
		if (pos == V)
		{
			// And if there is an edge from the last included
			// vertex to the first vertex
			if (graph[path[pos - 1]][path[0]] == 1)
				return true;
			else
				return false;
		}
		for (int v = 1; v < V; v++)
		{
			/* Check if this vertex can be added to Hamiltonian
			Cycle */
			if (isSafe(v, graph, path, pos))
			{
				path[pos] = v;

				/* recur to construct rest of the path */
				if (hamCycleUtil(graph, path, pos + 1) == true)
					return true;

				/* If adding vertex v doesn't lead to a solution,
				then remove it */
				path[pos] = -1;
			}
		}

		/* If no vertex can be added to Hamiltonian Cycle
		constructed so far, then return false */
		return false;
	}
	int hamCycle(int graph[][])
	{
		path = new int[V];
		for (int i = 0; i < V; i++)
			path[i] = -1;
		path[0] = 0;
		if (hamCycleUtil(graph, path, 1) == false)
		{
			System.out.println("\nSolution does not exist");
			return 0;
		}

		printSolution(path);
		return 1;
	}

	/* A utility function to print solution */
	void printSolution(int path[])
	{
		System.out.println("Solution Exists: Following" +
						" is one Hamiltonian Cycle");
		for (int i = 0; i < V; i++)
			System.out.print(" " + path[i] + " ");

		// Let us print the first vertex again to show the
		// complete cycle
		System.out.println(" " + path[0] + " ");
	}

	// driver program to test above function
	public static void main(String args[])
	{
		HamiltonianCycle hamiltonian =
								new HamiltonianCycle();
		int graph1[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 1},
			{0, 1, 1, 1, 0},
		};

		// Print the solution
		hamiltonian.hamCycle(graph1);
	}
}

15) OBST dynamic program

// Dynamic Programming Java code for Optimal Binary Search
// Tree Problem
public class Optimal_BST2 {
	static int optimalSearchTree(int keys[], int freq[], int n) {

		/* Create an auxiliary 2D matrix to store results of
		subproblems */
		int cost[][] = new int[n + 1][n + 1];

		// For a single key, cost is equal to frequency of the key
		for (int i = 0; i < n; i++)
			cost[i][i] = freq[i];

		// Now we need to consider chains of length 2, 3, ... .
		// L is chain length.
		for (int L = 2; L <= n; L++) {

			// i is row number in cost[][]
			for (int i = 0; i <= n - L + 1; i++) {
				int j = i + L - 1;
				cost[i][j] = Integer.MAX_VALUE;

				// Try making all keys in interval keys[i..j] as root
				for (int r = i; r <= j; r++) {

					// c = cost when keys[r] becomes root of this subtree
					int c = ((r > i) ? cost[i][r - 1] : 0)
							+ ((r < j) ? cost[r + 1][j] : 0) + sum(freq, i, j);
					if (c < cost[i][j])
						cost[i][j] = c;
				}
			}
		}
		return cost[0][n - 1];
	}


	static int sum(int freq[], int i, int j) {
		int s = 0;
		for (int k = i; k <= j; k++) {
			if (k >= freq.length)
				continue;
			s += freq[k];
		}
		return s;
	}

	public static void main(String[] args) {
		
		int keys[] = { 10, 12, 20 };
		int freq[] = { 34, 8, 50 };
		int n = keys.length;
		System.out.println("Cost of Optimal BST is "
				+ optimalSearchTree(keys, freq, n));
	}

}

16) MinMax (google method)

class pair{
    int min;
    int max;
    public pair(int min,int max){
        this.min=min;
        this.max=max;
    }
}
public class minmax {
    static void findminmax(int arr[],int left,int right,pair p){
        if(left==right){
            if(arr[left]<p.min){
                p.min=arr[left];
            }
            if(arr[left]>p.max){
                p.max=arr[left];
            }
            return;
        }
        if(right-left==1){
            if(arr[left]<arr[right]){
                if(p.max<arr[right]){
                    p.max=arr[right];
                }
                if(arr[left]<p.min){
                    p.min=arr[left];
                }
            }
            else{
                if(p.max<arr[left]){
                    p.max=arr[left];
                }
                if(p.min>arr[right]){
                    p.min=arr[right];
                }
            }
            return;
        }
        int mid=(left+right)/2;
        findminmax(arr,left,mid,p);
        findminmax(arr,mid,right,p);
    }
    public static void main(String[] args) {
        pair p=new pair(Integer.MAX_VALUE,Integer.MIN_VALUE);
        int arr[]={21,1,900,232,5000,-1,1221};
        findminmax(arr,0,arr.length-1,p);
        System.out.println(p.min+"---"+p.max);
    }
}

17) Prims algorithm(short program)
import java.util.*;
public class prims {
    static int primMST(int graph[][],int V){
        int key[]=new int[V],res=0;
        Arrays.fill(key,Integer.MAX_VALUE);
        key[0]=0;
        boolean mset[]=new boolean[V];
        for(int count=0;count<V;count++){
            int u=-1;
            for(int i=0;i<V;i++){
                if(!mset[i] && (u==-1||key[i]<key[u])){
                    u=i;
                }
            }
            mset[u]=true;
            res=res+key[u];
            for(int v=0;v<V;v++){
                if(!mset[v]&& graph[u][v]!=0 && graph[u][v]<key[v]){
                    key[v]=graph[u][v];
                }
            } 
        }
        return res;
    }
    public static void main(String[] args) {
        int graph[][]={
                       {0,5,8,0},
                       {5,0,10,15},
                       {8,10,0,20},
                       {0,15,20,0}
                    };
        System.out.println(primMST(graph,4)); 
    }
}

18) Djikstra program (short one)

import java.util.*;
public class dik {
    static int[] diks(int graph[][],int src,int V){
        int dis[]=new int[V];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[src]=0;
        boolean mset[]=new boolean[V];
        for(int count=0;count<V-1;count++){
            int u=-1;
            for(int i=0;i<V;i++){
                if(!mset[i] && (u==-1||dis[i]<dis[u])){
                    u=i;
                }
            }
            mset[u]=true;
            for(int v=0;v<V;v++){
                if(!mset[v]&&graph[u][v]!=0){
                    dis[v]=Math.min(dis[v],dis[u]+graph[u][v]);
                }
            } 
        }
        return dis;
    }
    public static void main(String[] args) {
        int graph[][]={
                       {0,5,3},
                       {5,0,1},
                       {3,1,0}
                    };
        System.out.println(Arrays.toString(diks(graph,1,3))); 
    }
}



