knap

class Knapsack{
	static int knapSack(int W,int wt[],int val[],int n){
		int i,j;
		int[][] K=new int[n+1][W+1];
		for(i=0;i<=n;i++){
			for(j=0;j<=W;j++){
				if(i==0||j==0)
					K[i][j]=0;
				else if(wt[i-1]<=j)
					K[i][j]=Math.max(val[i-1]+K[i-1][j-wt[i-1]],K[i-1][j]);
				else
					K[i][j]=K[i-1][j];
			}
		}
		return K[n][W];
	}
	public static void main(String args[]){
		int val[]=new int[]{1,2,5,6};
		int wt[]=new int[]{2,3,4,5};
		int W=8;
		int n=val.length;
		System.out.println("The Max Profit Obtained is : "+knapSack(W,wt,val,n));
	}
}

--------------------------------------------------------------------------------------
connected comp

import java.util.ArrayList;                          
class Graph{            
	int V;
	ArrayList<ArrayList<Integer>> adjList;
	Graph(int V){
		this.V=V;
		adjList=new ArrayList<>();          
		for(int i=0;i<V;i++){        
			adjList.add(i,new ArrayList<>());
		}
	}
	void addEdge(int src,int dest){
		adjList.get(src).add(dest);
		adjList.get(dest).add(src);
	}
	void DFSUtil(int v,boolean[] visited){
		visited[v]=true;
		System.out.print(v+" ");
		for(int x:adjList.get(v)){
			if (!visited[x]){
				DFSUtil(x,visited);
            }
		}
	}
	void connectedComponents(){
		boolean[] visited=new boolean[V];
		for(int v=0;v<V;++v){
			if(!visited[v]){
				DFSUtil(v,visited);
				System.out.println();
			}
		}
	}
	public static void main(String[] args){
		Graph g=new Graph(5);
		g.addEdge(1, 0);
		g.addEdge(2, 3);
		g.addEdge(3, 4);
		System.out.println("Following are connected components");
		g.connectedComponents();
	}
}

--------------------------------------------------------------------------------
OBST

public class Optimal_BST2{              
	static int optimalSearchTree(int keys[],int freq[],int n){
		int cost[][]=new int[n+1][n+1];
		for(int i=0;i<n;i++)
			cost[i][i]=freq[i];
		for(int L=2;L<=n;L++){
			for(int i=0;i<=n-L+1;i++){
				int j=i+L-1;
				cost[i][j]=Integer.MAX_VALUE;
				for(int r=i;r<=j;r++){
					int c=((r>i)?cost[i][r-1]:0)+((r<j)?cost[r+1][j]:0)+sum(freq,i,j);
					if(c<cost[i][j]){
						cost[i][j]=c;
					}
				}
			}
		}
		return cost[0][n-1];
	}
	static int sum(int freq[],int i,int j){
		int s=0;
		for(int k=i;k<=j;k++){
			if(k>=freq.length)
				continue;
			s+=freq[k];
		}
		return s;
	}
	public static void main(String[] args){
		int keys[]={10,12,20};
		int freq[]={34,8,50};
		int n=keys.length;
		System.out.println("Cost of Optimal BST is "+optimalSearchTree(keys,freq,n));
	}
}

-------------------------------------------------------------------------------------