// --------------- BST --------------
class Node {
    int data;
    Node left = null, right = null;
    Node(int data) {
        this.data = data;
    }
}
class Main {
    public static void inorder(Node root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }
    public static Node getMinimumKey(Node curr) {
        while (curr.left != null) {
            curr = curr.left;
        }
        return curr;
    }
    public static Node insert(Node root, int key) {
        if (root == null) {
            return new Node(key);
        }
        if (key < root.data) {
            root.left = insert(root.left, key);
        } else {
            root.right = insert(root.right, key);
        }
        return root;
    }
    public static Node deleteNode(Node root, int key) {
        Node parent = null;
        Node curr = root;
        while (curr != null && curr.data != key) {
            parent = curr;
            if (key < curr.data) {
                curr = curr.left;
            } else {
                curr = curr.right;
            }
        }
        if (curr == null) {
            return root;
        }
        if (curr.left == null && curr.right == null) {
            if (curr != root) {
                if (parent.left == curr) {
                    parent.left = null;
                } else {
                    parent.right = null;
                }
            } else {
                root = null;
            }
        }
        else if (curr.left != null && curr.right != null) {
            Node successor = getMinimumKey(curr.right);
            int val = successor.data;
            deleteNode(root, successor.data);
            curr.data = val;
        } else {
            Node child = (curr.left != null)? curr.left: curr.right;
            if (curr != root) {
                if (curr == parent.left) {
                    parent.left = child;
                } else {
                    parent.right = child;
                }
            } else {
                root = child;
            }
        }
        return root;
    }
    public static void main(String[] args) {
        int[] keys = { 15, 10, 20, 8, 12, 16 };
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
        root = deleteNode(root, 16);
        inorder(root);
    }
}

// --------------- MinMax --------------

class Pair {
    public int max, min;
    public Pair(int max, int min) {
        this.max = max;
        this.min = min;
    }
}
class Main {
    public static void findMinAndMax(int[] nums, int left, int right, Pair p) {
        if (left == right) {
            if (p.max < nums[left]) {
                p.max = nums[left];
            }
            if (p.min > nums[right]) {
                p.min = nums[right];
            }
            return;
        }
        if (right - left == 1){
            if (nums[left] < nums[right]) {
                if (p.min > nums[left]) {
                    p.min = nums[left];
                }
                if (p.max < nums[right]) {
                    p.max = nums[right];
                }
            } else {
                if (p.min > nums[right]) {
                    p.min = nums[right];
                }
                if (p.max < nums[left]) {
                    p.max = nums[left];
                }
            }
            return;
        }
        int mid = (left + right) / 2;
        findMinAndMax(nums, left, mid, p);
        findMinAndMax(nums, mid + 1, right, p);
    }
    public static void main(String[] args) {
        int[] nums = {7, 2, 9, 3, 1, 6, 7, 8, 4};
        Pair p = new Pair(Integer.MIN_VALUE, Integer.MAX_VALUE);
        findMinAndMax(nums, 0, nums.length - 1, p);
        System.out.println("The minimum array element is " + p.min);
        System.out.println("The maximum array element is " + p.max);
    }
}

// --------------- MergeSort --------------
class MergeSort {
    void merge(int arr[], int l, int m, int r)
    {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    void sort(int arr[], int l, int r) {
        if (l < r) {
            int m =l+ (r-l)/2;
            sort(arr, l, m);
            sort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
    public static void main(String args[]) {
        int arr[] = { 12, 11, 13, 5, 6, 7 };
        System.out.println("Given Array");
        printArray(arr);
        MergeSort ob = new MergeSort();
        ob.sort(arr, 0, arr.length - 1);
        System.out.println("\nSorted array");
        printArray(arr);
    }
}

// --------------- Job Sequencing --------------
import java.util.*;
class Job {
    char id;
    int deadline, profit;
    public Job() {}
    public Job(char id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
    void printJobScheduling(ArrayList<Job> arr, int t) {
        int n = arr.size();
        Collections.sort(arr,(a, b) -> b.profit - a.profit);
        boolean result[] = new boolean[t];
        char job[] = new char[t];
        for (int i = 0; i < n; i++) {
            for (int j = Math.min(t - 1, arr.get(i).deadline - 1); j >= 0; j--) {
                if (result[j] == false) {
                    result[j] = true;
                    job[j] = arr.get(i).id;
                    break;
                }
            }
        }
        for (char jb : job)
            System.out.print(jb + " ");
        System.out.println();
    }
    public static void main(String args[]) {
        ArrayList<Job> arr = new ArrayList<Job>();
        arr.add(new Job('a', 2, 100));
        arr.add(new Job('b', 1, 19));
        arr.add(new Job('c', 2, 27));
        arr.add(new Job('d', 1, 25));
        arr.add(new Job('e', 3, 15));
        System.out.println("Following is maximum profit sequence of jobs");
        Job job = new Job();
        job.printJobScheduling(arr, 3);
    }
}