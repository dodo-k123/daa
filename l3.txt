11)Articulation points 
	// A Java program to find articulation
// points in an undirected graph
import java.util.*;

class Graph {

	static int time;

	static void addEdge(ArrayList<ArrayList<Integer> > adj, int u, int v)
	{
		adj.get(u).add(v);
		adj.get(v).add(u);
	}

	static void APUtil(ArrayList<ArrayList<Integer> > adj, int u,
					boolean visited[], int disc[], int low[],
					int parent, boolean isAP[])
	{
		// Count of children in DFS Tree
		int children = 0;

		// Mark the current node as visited
		visited[u] = true;

		// Initialize discovery time and low value
		disc[u] = low[u] = ++time;

		// Go through all vertices adjacent to this
		for (Integer v : adj.get(u)) {
			// If v is not visited yet, then make it a child of u
			// in DFS tree and recur for it
			if (!visited[v]) {
				children++;
				APUtil(adj, v, visited, disc, low, u, isAP);

				// Check if the subtree rooted with v has
				// a connection to one of the ancestors of u
				low[u] = Math.min(low[u], low[v]);

				// If u is not root and low value of one of
				// its child is more than discovery value of u.
				if (parent != -1 && low[v] >= disc[u])
					isAP[u] = true;
			}

			// Update low value of u for parent function calls.
			else if (v != parent)
				low[u] = Math.min(low[u], disc[v]);
		}

		// If u is root of DFS tree and has two or more children.
		if (parent == -1 && children > 1)
			isAP[u] = true;
	}

	static void AP(ArrayList<ArrayList<Integer> > adj, int V)
	{
		boolean[] visited = new boolean[V];
		int[] disc = new int[V];
		int[] low = new int[V];
		boolean[] isAP = new boolean[V];
		int time = 0, par = -1;

		// Adding this loop so that the
		// code works even if we are given
		// disconnected graph
		for (int u = 0; u < V; u++)
			if (visited[u] == false)
				APUtil(adj, u, visited, disc, low, par, isAP);

		for (int u = 0; u < V; u++)
			if (isAP[u] == true)
				System.out.print(u + " ");
		System.out.println();
	}

	public static void main(String[] args)
	{

		// Creating first example graph
		int V = 5;
		ArrayList<ArrayList<Integer> > adj1 =
						new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj1.add(new ArrayList<Integer>());
		addEdge(adj1, 1, 0);
		addEdge(adj1, 0, 2);
		addEdge(adj1, 2, 1);
		addEdge(adj1, 0, 3);
		addEdge(adj1, 3, 4);
		System.out.println("Articulation points in first graph");
		AP(adj1, V);

		// Creating second example graph
		V = 4;
		ArrayList<ArrayList<Integer> > adj2 =
						new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj2.add(new ArrayList<Integer>());

		addEdge(adj2, 0, 1);
		addEdge(adj2, 1, 2);
		addEdge(adj2, 2, 3);

		System.out.println("Articulation points in second graph");
		AP(adj2, V);

		// Creating third example graph
		V = 7;
		ArrayList<ArrayList<Integer> > adj3 =
							new ArrayList<ArrayList<Integer> >(V);
		for (int i = 0; i < V; i++)
			adj3.add(new ArrayList<Integer>());

		addEdge(adj3, 0, 1);
		addEdge(adj3, 1, 2);
		addEdge(adj3, 2, 0);
		addEdge(adj3, 1, 3);
		addEdge(adj3, 1, 4);
		addEdge(adj3, 1, 6);
		addEdge(adj3, 3, 5);
		addEdge(adj3, 4, 5);

		System.out.println("Articulation points in third graph");

		AP(adj3, V);
	}
}
12) Nqueens program
	/* Java program to solve N Queen Problem using
backtracking */
public class NQueenProblem {
	final int N = 4;

	/* A utility function to print solution */
	void printSolution(int board[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(" " + board[i][j]
								+ " ");
			System.out.println();
		}
	}

	/* A utility function to check if a queen can
	be placed on board[row][col]. Note that this
	function is called when "col" queens are already
	placeed in columns from 0 to col -1. So we need
	to check only left side for attacking queens */
	boolean isSafe(int board[][], int row, int col)
	{
		int i, j;

		/* Check this row on left side */
		for (i = 0; i < col; i++)
			if (board[row][i] == 1)
				return false;

		/* Check upper diagonal on left side */
		for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
			if (board[i][j] == 1)
				return false;

		/* Check lower diagonal on left side */
		for (i = row, j = col; j >= 0 && i < N; i++, j--)
			if (board[i][j] == 1)
				return false;

		return true;
	}

	/* A recursive utility function to solve N
	Queen problem */
	boolean solveNQUtil(int board[][], int col)
	{
		/* base case: If all queens are placed
		then return true */
		if (col >= N)
			return true;

		/* Consider this column and try placing
		this queen in all rows one by one */
		for (int i = 0; i < N; i++) {
			/* Check if the queen can be placed on
			board[i][col] */
			if (isSafe(board, i, col)) {
				/* Place this queen in board[i][col] */
				board[i][col] = 1;

				/* recur to place rest of the queens */
				if (solveNQUtil(board, col + 1) == true)
					return true;

				/* If placing queen in board[i][col]
				doesn't lead to a solution then
				remove queen from board[i][col] */
				board[i][col] = 0; // BACKTRACK
			}
		}

		/* If the queen can not be placed in any row in
		this column col, then return false */
		return false;
	}

	/* This function solves the N Queen problem using
	Backtracking. It mainly uses solveNQUtil () to
	solve the problem. It returns false if queens
	cannot be placed, otherwise, return true and
	prints placement of queens in the form of 1s.
	Please note that there may be more than one
	solutions, this function prints one of the
	feasible solutions.*/
	boolean solveNQ()
	{
		int board[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

		if (solveNQUtil(board, 0) == false) {
			System.out.print("Solution does not exist");
			return false;
		}

		printSolution(board);
		return true;
	}

	// driver program to test above function
	public static void main(String args[])
	{
		NQueenProblem Queen = new NQueenProblem();
		Queen.solveNQ();
	}
}
13) Mcoloring Program
public class mColoringProblem
{
	final int V = 4;
	int color[];

	/* A utility function to check
	if the current color assignment
	is safe for vertex v */
	boolean isSafe(
		int v, int graph[][], int color[],
		int c)
	{
		for (int i = 0; i < V; i++)
			if (
				graph[v][i] == 1 && c == color[i])
				return false;
		return true;
	}

	/* A recursive utility function
	to solve m coloring problem */
	boolean graphColoringUtil(
		int graph[][], int m,
		int color[], int v)
	{
		/* base case: If all vertices are
		assigned a color then return true */
		if (v == V)
			return true;

		/* Consider this vertex v and try
		different colors */
		for (int c = 1; c <= m; c++)
		{
			/* Check if assignment of color c to v
			is fine*/
			if (isSafe(v, graph, color, c))
			{
				color[v] = c;

				/* recur to assign colors to rest
				of the vertices */
				if (
					graphColoringUtil(
						graph, m,
						color, v + 1))
					return true;

				/* If assigning color c doesn't lead
				to a solution then remove it */
				color[v] = 0;
			}
		}

		/* If no color can be assigned to
		this vertex then return false */
		return false;
	}
	boolean graphColoring(int graph[][], int m)
	{
		// Initialize all color values as 0. This
		// initialization is needed correct
		// functioning of isSafe()
		color = new int[V];
		for (int i = 0; i < V; i++)
			color[i] = 0;

		// Call graphColoringUtil() for vertex 0
		if (
			!graphColoringUtil(
				graph, m, color, 0))
		{
			System.out.println(
				"Solution does not exist");
			return false;
		}

		// Print the solution
		printSolution(color);
		return true;
	}

	/* A utility function to print solution */
	void printSolution(int color[])
	{
		System.out.println(
			"Solution Exists: Following"
			+ " are the assigned colors");
		for (int i = 0; i < V; i++)
			System.out.print(" " + color[i] + " ");
		System.out.println();
	}

	// driver program to test above function
	public static void main(String args[])
	{
		mColoringProblem Coloring
			= new mColoringProblem();
		int graph[][] = {
			{ 0, 1, 1, 1 },
			{ 1, 0, 1, 0 },
			{ 1, 1, 0, 1 },
			{ 1, 0, 1, 0 },
		};
		int m = 3; // Number of colors
		Coloring.graphColoring(graph, m);
	}
}

14 ) Hamiltonian cycle 
class HamiltonianCycle
{
	final int V = 5;
	int path[];
	boolean isSafe(int v, int graph[][], int path[], int pos)
	{
		/* Check if this vertex is an adjacent vertex of
		the previously added vertex. */
		if (graph[path[pos - 1]][v] == 0)
			return false;

		/* Check if the vertex has already been included.
		This step can be optimized by creating an array
		of size V */
		for (int i = 0; i < pos; i++)
			if (path[i] == v)
				return false;

		return true;
	}

	boolean hamCycleUtil(int graph[][], int path[], int pos)
	{
		/* base case: If all vertices are included in
		Hamiltonian Cycle */
		if (pos == V)
		{
			// And if there is an edge from the last included
			// vertex to the first vertex
			if (graph[path[pos - 1]][path[0]] == 1)
				return true;
			else
				return false;
		}
		for (int v = 1; v < V; v++)
		{
			/* Check if this vertex can be added to Hamiltonian
			Cycle */
			if (isSafe(v, graph, path, pos))
			{
				path[pos] = v;

				/* recur to construct rest of the path */
				if (hamCycleUtil(graph, path, pos + 1) == true)
					return true;

				/* If adding vertex v doesn't lead to a solution,
				then remove it */
				path[pos] = -1;
			}
		}

		/* If no vertex can be added to Hamiltonian Cycle
		constructed so far, then return false */
		return false;
	}
	int hamCycle(int graph[][])
	{
		path = new int[V];
		for (int i = 0; i < V; i++)
			path[i] = -1;
		path[0] = 0;
		if (hamCycleUtil(graph, path, 1) == false)
		{
			System.out.println("\nSolution does not exist");
			return 0;
		}

		printSolution(path);
		return 1;
	}

	/* A utility function to print solution */
	void printSolution(int path[])
	{
		System.out.println("Solution Exists: Following" +
						" is one Hamiltonian Cycle");
		for (int i = 0; i < V; i++)
			System.out.print(" " + path[i] + " ");

		// Let us print the first vertex again to show the
		// complete cycle
		System.out.println(" " + path[0] + " ");
	}

	// driver program to test above function
	public static void main(String args[])
	{
		HamiltonianCycle hamiltonian =
								new HamiltonianCycle();
		int graph1[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 1},
			{0, 1, 1, 1, 0},
		};

		// Print the solution
		hamiltonian.hamCycle(graph1);
	}
}